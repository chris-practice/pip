<?php

/**
 * Implements hook_flag_link_types().
 */
function flag_ajax_confirm_flag_link_type_info() {
  return array(
    'ajax_confirm' => array(
      'title' => t('AJAX Confirmation form'),
      'description' => t('The user will be shown an AJAX form to confirm the flag.'),
      'options' => array(
        'confirm_modal_style' => 'modal-popup-small',
        'flag_confirmation' => '',
        'unflag_confirmation' => '',
      ),
      'uses standard js' => FALSE,
      'uses standard css' => FALSE,
    ),
  );
}

/*
 * Implements hook_flag_link().
 */
function flag_ajax_confirm_flag_link($flag, $action, $content_id) {
  return array(
    'href' => 'flag/ajax-confirm/nojs/' . "$action/$flag->name/$content_id",
    'query' => drupal_get_destination(),
    'attributes' => array('class' => array('ctools-use-modal')),
  );
}

/**
 * Implements hook_form_alter().
 */
function flag_ajax_confirm_form_flag_form_alter(&$form, &$form_state, $form_id) {
  $flag = $form['#flag'];
  $form['display']['link_options_ajax_confirm'] = array(
    '#type' => 'fieldset',
    '#title' => t('Options for the "Confirmation form" link type'),
    // Any "link type" provider module must put its settings fields inside
    // a fieldset whose HTML ID is link-options-LINKTYPE, where LINKTYPE is
    // the machine-name of the link type. This is necessary for the
    // radiobutton's JavaScript dependency feature to work.
    '#id' => 'link-options-ajax_confirm',
    '#weight' => 22,
  );

  $form['display']['link_options_ajax_confirm']['confirm_modal_style'] = array(
    '#type' => 'radios',
    '#title' => t('Confirmation modal window sytle'),
    '#default_value' => isset($flag->confirm_modal_style) ? $flag->confirm_modal_style : 'modal-popup-small',
    '#options' => array(
      'modal-popup-small' => t('Small popup'),
      'modal-popup-medium' => t('Medium popup'),
      'modal-popup-large' => t('Large popup'),
    ),
  );
  $form['display']['link_options_ajax_confirm']['flag_confirmation'] = array(
    '#type' => 'textfield',
    '#title' => t('Flag confirmation message'),
    '#default_value' => isset($flag->flag_confirmation) ? $flag->flag_confirmation : '',
    '#description' => t('Message displayed if the user has clicked the "flag this" link and confirmation is required. Usually presented in the form of a question such as, "Are you sure you want to flag this content?"'),
    '#access' => empty($flag->locked['flag_confirmation']),
  );

  $form['display']['link_options_ajax_confirm']['unflag_confirmation'] = array(
    '#type' => 'textfield',
    '#title' => t('Unflag confirmation message'),
    '#default_value' => isset($flag->unflag_confirmation) ? $flag->unflag_confirmation : '',
    '#description' => t('Message displayed if the user has clicked the "unflag this" link and confirmation is required. Usually presented in the form of a question such as, "Are you sure you want to unflag this content?"'),
    '#access' => empty($flag->locked['unflag_confirmation']),
  );

}

/**
 * Implements hook_menu().
 */
function flag_ajax_confirm_menu() {
  $items['flag/ajax-confirm/%ctools_js/%/%flag/%'] = array(
    'title' => 'Flag confirm',
    'page callback' => 'flag_ajax_confirm_page',
    'page arguments' => array(2, 3, 4, 5),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function flag_ajax_confirm_theme($existing, $type, $theme, $path) {
  return array(
    'flag__ajax_confirm' => array(
      'base hook' => 'flag',
      'variables' => array('flag' => NULL, 'action' => NULL, 'content_id' => NULL, 'errors' => array(), 'flag_classes' => NULL, 'after_flagging' => FALSE),
      'template' => 'flag--ajax-confirm',
      'path' => drupal_get_path('module', 'flag_ajax_confirm'),
    ),
  );
}

function flag_ajax_confirm_preprocess_flag(&$variables) {
  if ($variables['flag']->link_type == 'ajax_confirm' && $variables['link_href']) {
    ctools_include('modal');
    ctools_include('ajax');
    ctools_modal_add_js();
    $variables['flag_classes'] .= ' ctools-modal-' . $variables['flag']->confirm_modal_style;
    $variables['modal_link'] = ctools_modal_text_button($variables['link_text'], $variables['link']['href'], $variables['link_title'], $variables['flag_classes']);
  }
}

function flag_ajax_confirm_page($js, $action, $flag, $eid) {
  module_load_include('inc', 'flag', 'includes/flag.pages');
  if (!$js) {
    return drupal_get_form('flag_ajax_confirm', $action, $flag, $eid);
  } else {
    ctools_include('modal');
    ctools_include('ajax');

    $action_confirmation = $flag->action . '_confirmation';

    $form_state = array(
      //'title' => $flag->$action_confirmation,
      'title' => 'Cancel Meeting',
      'ajax' => TRUE,
      'build_info' => array(
        'args' => array(
          0 => $action,
          1 => $flag,
          3 => $eid,
        ),
      ),
    );

    $output = ctools_modal_form_wrapper('flag_ajax_confirm', $form_state, $action, $flag, $eid);
    if (!empty($form_state['executed'])) {
      $output = array();

      //This makes sure we go to the right place once we close the modal window
      if (isset($_GET['destination'])) {
        $output[] = ctools_ajax_command_redirect($_GET['destination']);
      }
      else {
        $output[] = ctools_ajax_command_reload();
      }
    }
    //Return the JSON string ready to be rendered back to the DOM
    print ajax_render($output);
    exit;
  }
}

/**
 * Form for confirming the (un)flagging of an entity.
 *
 * @param string $action
 *   Either 'flag' or 'unflag'.
 * @param flag_flag $flag
 *   A loaded flag object.
 * @param int $entity_id
 *   The id of the entity to operate on. The type is implicit in the flag.
 *
 * @see flag_confirm_submit()
 */
function flag_ajax_confirm($form, &$form_state, $action, $flag, $entity_id) {
  //watchdog('flag_confirm_form', '<pre>'. print_r($action, TRUE) . '</pre>');
  $form['#flag'] = $flag;
  $form['action'] = array(
    '#type' => 'value',
    '#value' => $action,
  );
  $form['entity_id'] = array(
    '#type' => 'value',
    '#value' => $entity_id,
  );

  $question = $flag->get_label($action . '_confirmation', $entity_id);
  $form['question'] = array(
    '#markup' => $question,
  );
  
  //$path = isset($_GET['destination']) ? $_GET['destination'] : '<front>';
  $path = 'node/' . $entity_id;
  $yes = strip_tags($flag->get_label($action . '_short', $entity_id));

  if ($action == 'flag') {
    // If the action 'flag', we're potentially about to create a new
    // flagging entity. We need an empty new entity to pass to FieldAPI.
    $flagging = $flag->new_flagging($entity_id);
    field_attach_form('flagging', $flagging, $form, $form_state);
    $form['#flagging'] = $flagging;

    // Take the same approach as Core entity forms: shove all the entity
    // properties into the form as values so that entity_form_field_validate()
    // can build a pseudoentity from $form_values in the validate handler.
    foreach (array(
      'flag_name',
      'entity_type',
      'entity_id',
      'uid',
    ) as $key) {
      $form[$key] = array(
        '#type' => 'value',
        '#value' => isset($flagging->$key) ? $flagging->$key : NULL,
      );
    }
  }

  return confirm_form($form, $question, $path, '', $yes);
}

/**
 * Validate handler for the flag confirm form.
 *
 * Validate any Field API fields on the Flagging.
 *
 * @see flag_confirm()
 */
function flag_ajax_confirm_validate($form, &$form_state) {
  // Only validate the entity fields when we're saving an entity.
  $action = $form_state['values']['action'];
  if ($action == 'flag') {
    entity_form_field_validate('flagging', $form, $form_state);
  }
}

/**
 * Submit handler for the flag confirm form.
 *
 * Note that validating whether the user may perform the action is done here,
 * rather than in a form validation handler.
 *
 * @see flag_confirm()
 */
function flag_ajax_confirm_submit(&$form, &$form_state) {
  $flag = $form['#flag'];
  $action = $form_state['values']['action'];
  $entity_id = $form_state['values']['entity_id'];

  if ($action == 'flag') {
    // If the action 'flag', further build up the new entity from form values.
    $flagging = $form['#flagging'];
    entity_form_submit_build_entity('flagging', $flagging, $form, $form_state);

    $result = $flag->flag($action, $entity_id, NULL, FALSE, $flagging);
  }
  else {
    $result = $flag->flag($action, $entity_id, NULL, FALSE);
  }

  if (!$result) {
    if ($errors = $flag->get_errors()) {
      foreach ($errors as $error) {
        drupal_set_message($error, 'error');
      }
    }
  }
  else {
    drupal_set_message($flag->get_label($action . '_message', $entity_id));
  }
}
